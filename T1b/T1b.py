# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kcRd23BgASHk9w37PW6o_6lLgdD9kLTV

Al implementar lo pedido sin explicitamente crear una función:
"""

###EJ 1##


lpalabras= ['ddddaxs','dedsdwdw','dsds','xxs','xxs']  #lista de input de prueba
dix = dict() #se crea un diccionario

for elem in lpalabras:    #se recorre la lista de palabras

  if elem not in dix:    #Se incorporan palabras nuevas con ocurrencias 0 al diccionario
    dix[elem]=0

  dix[elem] +=1         #Se aumentan las ocurrencias (values) de todas las palabras (keys)

lista_f=[]                # Se crea lista para ser llenada de tuplas

for i,j in dix.items():     #se obtienen todos los items (par key-value) del diccionario final obtenido 
  lista_f.append( (i,j))    #para ser agregados a la lista final
print(lista_f)

"""Ahora al implementar una función que reciba un solo argumento, este siendo una lista de strings:"""

def calcular_ocurrencias(lista_input):
  dix = dict()             #se crea diccionario
  lista_output=[]        

  for elem in lista_input:   #se recorre la lista de palabras
      if elem not in dix:    #se crea par key-item como palabra - ocurrencias en caso de no estar
        dix[elem]=0          #se crea en 0 para poder aumentar las ocurrencuas fuera del if
                             
      dix[elem] +=1          #siempre se contabiliza +1 cada palabra de acuerdo a su key

  for i,j in dix.items():      #se obtienen todos los items (par key-value) del diccionario final obtenido
    lista_output.append( (i,j) )   #se crean tuplas (palabra- ocurrencias) que se agregan al final de una lista de output
  
  return lista_output               #el retorno de la función corresponde a la lista de output completa

palabras = ['avion', 'perro', 'gato', 'avion', 'edificio', 'gato']
ocurrencias = calcular_ocurrencias(palabras)
print(ocurrencias)